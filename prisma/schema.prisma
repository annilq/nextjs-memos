// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid())
  email     String?   @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  posts     Post[]
  username  String?
  github_id String    @unique
  sessions  Session[]

  @@map(name: "users")
}

model Post {
  id        String     @id @default(cuid())
  title     String
  content   String?
  published Boolean    @default(false)
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @updatedAt @map(name: "updated_at")
  author    User?      @relation(fields: [authorId], references: [id])
  authorId  String?
  categorys Category[]
}

model Category {
  id   String @id @default(cuid())
  name String
  Post Post[]
}

// model User {
//   id       String    @id
//   sessions Session[]
// }

// model Post {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author   User      @relation(fields: [authorId], references: [id])
//   authorId String    @db.ObjectId
//   comments Comment[]

// }

// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   comment String
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  String @db.ObjectId
// }

// model User {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   email         String?   @unique
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//   posts         Post[]
//   username          String?
//   github_id     String  @unique
//   sessions Session[]
//   @@map(name: "users")
// }
// // model User {
// //   id       String    @id
// //   sessions Session[]
// // }

// model Session {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   expiresAt DateTime
//   user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
// }
